# -*- coding: utf-8 -*-
"""GBoosting_Seattles.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/120u5M-2pAF0WQfuZ09K95ghPxgklNCjE
"""

from sklearn.preprocessing import LabelEncoder, MinMaxScaler
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.metrics import accuracy_score, confusion_matrix, mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv('seattle-weather.csv', index_col='date', parse_dates=True)
label_encoder = LabelEncoder()
df['weather_encoded'] = label_encoder.fit_transform(df['weather'])

# Normalize data
scaler = MinMaxScaler()
numerical_features = ['precipitation', 'temp_max', 'temp_min', 'wind']
df[numerical_features] = scaler.fit_transform(df[numerical_features])

sequence_length = 7  # Use past 7 days to predict the next day
features = numerical_features + ['weather_encoded']

# Create features for past n days
# For each sequence_length (in this case, I choose 7), it calculated the mean and std of each features
def create_features(df, sequence_length, features):
    feature_data = []
    for i in range(sequence_length, len(df)):
        past_data = df[features].iloc[i-sequence_length:i]
        feature_row = past_data.mean().tolist() + past_data.std().tolist()
        feature_data.append(feature_row)
    return np.array(feature_data)

# Prepare features
X = create_features(df, sequence_length, numerical_features)
y = df['weather_encoded'][sequence_length:].values

# Split data
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Gradient Boosting Classifier
model = GradientBoostingClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_val)

# Evaluate the model
accuracy = accuracy_score(y_val, y_pred)
print(f"Accuracy: {accuracy}")

# Confusion Matrix
cm = confusion_matrix(y_val, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=label_encoder.classes_)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()