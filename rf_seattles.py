# -*- coding: utf-8 -*-
"""RF_Seattles.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1osS2UnGrt2F_F4U59sNn5Spl2A2s2gFi
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.ensemble import RandomForestClassifier

# Load data into df
df = pd.read_csv('/content/seattle-weather.csv', index_col='date')
df = df.sort_values(by=['date'])
label_encoder = LabelEncoder()
df['weather_encoded'] = label_encoder.fit_transform(df['weather'])

# Normalize data
scaler = MinMaxScaler()
numerical_features = ['precipitation', 'temp_max', 'temp_min', 'wind']
df[numerical_features] = scaler.fit_transform(df[numerical_features])

sequence_length = 7  # Use past 7 days to predict the next day
features = numerical_features + ['weather_encoded']

# Create features for past n days
def create_features(df, sequence_length, features):
    feature_data = []
    for i in range(sequence_length, len(df)):
        past_data = df[features].iloc[i-sequence_length:i]
        feature_row = past_data.mean().tolist() + past_data.std().tolist()
        feature_data.append(feature_row)
    return np.array(feature_data)

# Prepare features
X = create_features(df, sequence_length, numerical_features)
y = df['weather_encoded'][sequence_length:].values

# Split data
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Random Forest
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred = rf_model.predict(X_val)

#Evaluation

accuracy = accuracy_score(y_val, y_pred)
print(f"Validation Accuracy: {accuracy}")

print("Classification Report:")
print(classification_report(y_val, y_pred, target_names=label_encoder.classes_))

# Encode predicted and true weather labels
# Using Label Encoder to change back from 1, 2, 3... to rain, fog,...
y_pred_labels = label_encoder.inverse_transform(y_pred)
y_val_labels = label_encoder.inverse_transform(y_val)

for i in range(10):  # Print first 10 prediction and true label
    print(f"Sample {i+1}: Predicted = {y_pred_labels[i]}, True = {y_val_labels[i]}")

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Confusion Matrix
cm = confusion_matrix(y_val, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=label_encoder.classes_)
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()